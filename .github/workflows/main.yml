name: Deploy Laravel Project

on:
  push:
    branches:
      - main # Or your deployment branch, e.g., master, production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest stable version

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0 # Or a similar action like appleboy/ssh-action
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          # This makes PHP_EXEC_CMD available to the runner's shell environment
          PHP_EXEC_CMD: ${{ secrets.PHP_PATH || 'php' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << EOF # Note: No quotes around EOF
            set -e # Exit immediately if a command exits with a non-zero status.

            echo "Target project directory: ${{ secrets.REMOTE_PATH }}"
            cd "${{ secrets.REMOTE_PATH }}" # Use quotes for safety if path has spaces

            echo "Verifying PHP command (${PHP_EXEC_CMD})..."
            ${PHP_EXEC_CMD} --version # Test command to ensure PHP is found

            echo "Current directory: $(pwd)"
            echo "Listing files (to check for artisan):"
            ls -la

            echo "Activating maintenance mode..."
            ${PHP_EXEC_CMD} artisan down || true # Allow to fail if already down

            echo "Pulling latest changes from Git..."
            git pull origin main # Or your deployment branch

            echo "Installing Composer dependencies..."
            # Ensure composer is available, you might need full path or add to deployer's PATH
            # Example: /usr/local/bin/composer or ~/.composer/vendor/bin/composer
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

            echo "Running database migrations..."
            ${PHP_EXEC_CMD} artisan migrate --force

            echo "Clearing caches..."
            ${PHP_EXEC_CMD} artisan optimize:clear

            echo "Optimizing application..."
            ${PHP_EXEC_CMD} artisan optimize

            echo "Setting directory permissions (example - adjust as needed!)..."
            # This is a common area for issues. Ensure 'www-data' (or your web server user)
            # can write to storage and bootstrap/cache. The deployer user needs to own files
            # or have sudo rights if changing ownership to www-data.
            # Example:
            # sudo chown -R www-data:www-data storage bootstrap/cache
            # sudo chmod -R 775 storage bootstrap/cache
            # If using sudo, configure NOPASSWD for these specific commands for the deployer user.

            echo "Restarting PHP-FPM (example - adjust to your PHP version)..."
            # This might require sudo. Example:
            # sudo systemctl restart php8.2-fpm

            echo "Deactivating maintenance mode..."
            ${PHP_EXEC_CMD} artisan up

            echo "Deployment finished successfully!"
          EOF
